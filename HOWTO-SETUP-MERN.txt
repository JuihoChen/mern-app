Instructions from Gemini

Getting started with the MERN stack involves understanding each component and how they work together.
MERN stands for MongoDB, Express.js, React, and Node.js.
It's a popular choice for building full-stack web applications because it allows you to write all your code in JavaScript.


P1. Understand Each Component

. MongoDB (Database): A NoSQL, document-oriented database. It stores data in flexible, JSON-like documents, which maps well with JavaScript objects.

. Express.js (Backend Framework): A fast, unopinionated, minimalist web framework for Node.js. It helps you build robust APIs
  (Application Programming Interfaces) for your application, handling routes, requests, and responses.

. React (Frontend Library): A JavaScript library for building user interfaces. It's component-based, allowing you to create reusable UI elements
  and manage the state of your application efficiently.

. Node.js (Backend Runtime): A JavaScript runtime built on Chrome's V8 JavaScript engine. It allows you to run JavaScript code on the server,
  making it possible to use JavaScript for both your frontend and backend.


P2. Prerequisites

Before you dive in, make sure you have these installed:

. Node.js and npm (Node Package Manager): Download and install from nodejs.org. npm comes with Node.js and is used to manage project dependencies.

. MongoDB: Download and install from mongodb.com. You'll also want to understand how to run the MongoDB server (mongod) and use a tool
  like MongoDB Compass (a GUI for MongoDB) or the MongoDB Shell (mongo) for interacting with your database.

. Code Editor: Visual Studio Code (VS Code) is highly recommended due to its excellent JavaScript support and extensions.


P3. Step-by-Step Setup

Let's build a simple MERN application.

Step 1: Set up the Backend (Node.js & Express.js)
-------------------------------------------------

1. Create a Project Folder:

mkdir mern-app
cd mern-app

2. Initialize Node.js Project:

npm init -y

This creates a package.json file.

3. Install Express and other dependencies:

npm install express mongoose dotenv cors

. express: The web framework.
. mongoose: An Object Data Modeling (ODM) library for MongoDB and Node.js, making it easier to interact with your database.
. dotenv: To load environment variables from a .env file.
. cors: A Node.js package for providing a Connect/Express middleware that can be used to enable CORS (Cross-Origin Resource Sharing).

juiho@P228000046:~/Documents/mern-app$ npm fund
mern-app@1.0.0
├── https://dotenvx.com
│   └── dotenv@17.1.0
├─┬ https://opencollective.com/express
│ │ └── express@5.1.0
│ ├── https://github.com/sponsors/sindresorhus
│ │   └── merge-descriptors@2.0.0
│ ├── https://github.com/sponsors/ljharb
│ │   └── qs@6.14.0, side-channel@1.1.0, object-inspect@1.13.4, side-channel-list@1.0.0, side-channel-map@1.0.1, call-bound@1.0.4, function-bind@1.1.2, get-intrinsic@1.3.0, gopd@1.2.0, has-symbols@1.1.0, side-channel-weakmap@1.0.2
│ └── https://github.com/sponsors/feross
│     └── safe-buffer@5.2.1
└── https://opencollective.com/mongoose
    └── mongoose@8.16.2


4. Create server.js (or app.js) in the root of your project:

nano server.js

5. Create a .env file in the root of your project:

PORT=5000
MONGO_URI=mongodb://localhost:27017/mern_db

. Make sure your MongoDB server (mongod) is running. If not, start it (e.g., by typing mongod in your terminal).

6. Add a start script to package.json:

"scripts": {
  "start": "node server.js"
}

7. Run the backend:

npm start

You should see "Server is running on port: 5000" and "MongoDB connected successfully!" in your console.
You can visit http://localhost:5000 in your browser to see "Hello from the MERN backend!".



Step 2: Create a Simple API with Mongoose
-----------------------------------------
Let's create a simple API for "items".

1. Create a models folder and item.model.js inside it:

mern-app/
├── node_modules/
├── models/
│   └── item.model.js
├── routes/             <-- Yes, this too!
│   └── item.routes.js  (or whatever your resource is, e.g., user.routes.js)
├── package.json
├── server.js
├── .env
└── (your frontend folder, e.g., client/ if it's a separate create-react-app)

nano models/item.model.js

2. Create a routes folder and items.js inside it:

nano routes/items.js

3. Integrate routes into server.js:

// ... (existing code)

const itemsRouter = require('./routes/items');
app.use('/items', itemsRouter); // All requests to /items will use itemsRouter

// ... (rest of the code)

Now restart your backend (Ctrl+C then npm start). You can test these API endpoints using tools like Postman or Insomnia.



Step 3: Set up the Frontend (React)
-----------------------------------

1. Create React App (outside your backend folder, but within mern-app):

cd .. # Go back to mern-app
npx create-react-app client
cd client

2. Install Axios (for making HTTP requests):

npm install axios

3. Modify client/src/App.js to fetch and display items:

nano src/App.js

4. Run the React frontend:

npm start

This will open your React app in your browser, usually at http://localhost:3000. 


=======================================================================================================================

Setup MongoDB Server

. Solution: Follow the official MongoDB installation guide for Ubuntu precisely. It typically involves commands like:

# Import the public key used by the package management system
wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -

# Create a list file for MongoDB
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list

# Reload local package database
sudo apt update

# Install MongoDB
sudo apt install -y mongodb-org

. After installation, MongoDB is usually set up as a system service. You'd start it using:

sudo systemctl start mongod
sudo systemctl enable mongod # To start on boot
sudo systemctl status mongod # Check status

=======================================================================================================================

Install Node.js on a Debian/Ubuntu system:

1. Update your package list:

sudo apt update

2. Install necessary packages for adding the repository:

sudo apt install -y ca-certificates curl gnupg lsb-release

3. Execute the NodeSource setup script for the desired Node.js version.

For Node.js 20 LTS (recommended):

curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -

4. Install Node.js (this will include npm):

sudo apt install -y nodejs

5. Verify your installation:

node -v
npm -v

----------------------------
If error encountered...
-----------------------
Preparing to unpack .../nodejs_20.19.3-1nodesource1_amd64.deb ...
Unpacking nodejs (20.19.3-1nodesource1) over (12.22.9~dfsg-1ubuntu3.6) ...
dpkg: error processing archive /var/cache/apt/archives/nodejs_20.19.3-1nodesource1_amd64.deb (--unpack):
 trying to overwrite '/usr/include/node/common.gypi', which is also in package libnode-dev 12.22.9~dfsg-1ubuntu3.6
dpkg-deb: error: paste subprocess was killed by signal (Broken pipe)
Errors were encountered while processing:
 /var/cache/apt/archives/nodejs_20.19.3-1nodesource1_amd64.deb
E: Sub-process /usr/bin/dpkg returned an error code (1)

1. Clean up previous Node.js related packages:

The error specifically mentions libnode-dev. It's also good to remove libnode72 and any other Node.js-related packages
that apt lists as "no longer required."

sudo apt remove --purge libnode-dev libnode72

# You can also use 'sudo apt autoremove' here as suggested by the output
sudo apt autoremove

This command will remove the conflicting old development files. The --purge flag ensures configuration files are also removed.

2. Clean the apt cache:

This removes the partially downloaded or problematic .deb file that caused the error.

sudo apt clean

3. Update your package list (again, to ensure everything is fresh):

sudo apt update

4. Install Node.js (this time, it should work smoothly):

sudo apt install -y nodejs

5. Verify your installation:

node -v
npm -v

=======================================================================================================================

juiho@P228000046:~/Documents/mern-app$ npx create-react-app client
Need to install the following packages:
create-react-app@5.1.0
Ok to proceed? (y) y

npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
npm warn deprecated rimraf@2.7.1: Rimraf versions prior to v4 are no longer supported
npm warn deprecated fstream-ignore@1.0.5: This package is no longer supported.
npm warn deprecated fstream@1.0.12: This package is no longer supported.
npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
npm warn deprecated uid-number@0.0.6: This package is no longer supported.
npm warn deprecated tar@2.2.2: This version of tar is no longer supported, and will not receive security updates. Please upgrade asap.
create-react-app is deprecated.

You can find a list of up-to-date React frameworks on react.dev
For more info see:https://react.dev/link/cra

This error message will only be shown once per install.

Creating a new React app in /home/juiho/Documents/mern-app/client.

Installing packages. This might take a couple of minutes.
Installing react, react-dom, and react-scripts with cra-template...


added 1322 packages in 32s

269 packages are looking for funding
  run `npm fund` for details

Installing template dependencies using npm...

added 18 packages, and changed 1 package in 4s

269 packages are looking for funding
  run `npm fund` for details
Removing template package using npm...


removed 1 package, and audited 1340 packages in 3s

269 packages are looking for funding
  run `npm fund` for details

9 vulnerabilities (3 moderate, 6 high)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

Success! Created client at /home/juiho/Documents/mern-app/client
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!

We suggest that you begin by typing:

  cd client
  npm start

Happy hacking!

------------------------------------------------

Now the project structure should look something like this:

mern-app/
├── client/                 <-- Your new React frontend app
│   ├── node_modules/
│   ├── public/
│   ├── src/
│   ├── package.json
│   └── ... (other React files)
├── node_modules/           <-- Your backend node_modules
├── models/
│   └── item.model.js
├── routes/
│   └── item.routes.js
├── package.json            <-- Your backend package.json
├── server.js
├── .env


=======================================================================================================================

juiho@P228000046:~/Documents/mern-app/client$ npm install axios

added 3 packages, and audited 1343 packages in 2s

269 packages are looking for funding
  run `npm fund` for details

9 vulnerabilities (3 moderate, 6 high)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
